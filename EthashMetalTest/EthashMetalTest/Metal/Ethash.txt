Light
block_number
cache

ProofOfWork
mix_hash
value

def get_seedhash(block_number):
s = '\x00' * 32
for i in range(block_number // EPOCH_LENGTH):
s = serialize_hash(sha3_256(s))
return s

def make_cache(cache_size, seed):
n = cache_size // HASH_BYTES

# Sequentially produce the initial dataset
o = [sha3_512(seed)]
for i in range(1, n):
o.append(sha3_512(o[-1]))

# Use a low-round version of randmemohash
for _ in range(CACHE_ROUNDS):
for i in range(n):
v = o[i][0] % n
o[i] = sha3_512(map(xor, o[(i-1+n) % n], o[v]))

return o

def get_full_size(block_number):
sz = DATASET_BYTES_INIT + DATASET_BYTES_GROWTH * (block_number // EPOCH_LENGTH)
sz -= MIX_BYTES
while not isprime(sz / MIX_BYTES):
sz -= 2 * MIX_BYTES
return sz

def hashimoto_light(light_node, header, nonce):
full_size = get_full_size(light_node.block_number)
return hashimoto(header, nonce, full_size, lambda x: calc_dataset_item(light_node.cache, x))

def hashimoto(header, nonce, full_size):
n = full_size / HASH_BYTES
w = MIX_BYTES // WORD_BYTES
mixhashes = MIX_BYTES / HASH_BYTES

# combine header+nonce into a 64 byte seed
s = sha3_512(header + nonce[::-1])

# start the mix with replicated s
mix = []
for _ in range(MIX_BYTES / HASH_BYTES):
mix.extend(s)

# mix in random dataset nodes
for i in range(ACCESSES):
p = fnv(i ^ s[0], mix[i % w]) % (n // mixhashes) * mixhashes

newdata = []
for j in range(MIX_BYTES / HASH_BYTES):
newdata.extend(calc_dataset_item(cache, (p + j)))
mix = map(fnv, mix, newdata)

# compress mix
cmix = []
for i in range(0, len(mix), 4):
cmix.append(fnv(fnv(fnv(mix[i], mix[i+1]), mix[i+2]), mix[i+3]))

mix_hash = serialize_hash(cmix)
value = serialize_hash(sha3_256(s+cmix))
return ProofOfWork {mix_hash, value}

def calc_dataset_item(cache, i):
n = len(cache)
r = HASH_BYTES // WORD_BYTES
# initialize the mix
mix = copy.copy(cache[i % n])
mix[0] ^= i
mix = sha3_512(mix)
# fnv it with a lot of random cache nodes based on i
for j in range(DATASET_PARENTS):
cache_index = fnv(i ^ j, mix[j % r])
mix = map(fnv, mix, cache[cache_index % n])
return sha3_512(mix)

FNV_PRIME = 0x01000193

def fnv(v1, v2):
return ((v1 * FNV_PRIME) ^ v2) % 2**32

